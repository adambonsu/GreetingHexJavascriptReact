name: BuildImage
run-name: "Build Image run by @${{ github.actor }}, event: ${{ github.event_name }}"
on:
    workflow_call:
    workflow_dispatch:
concurrency:
    group: build-image ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
    cancel-in-progress: true
jobs:
    build-image-android:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v3
            - name: Set up Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: 20
            - name: Install dependencies
              run: npm ci
            - name: Set up JDK 17
              uses: actions/setup-java@v3
              with:
                java-version: '17'
                distribution: 'temurin'
            - name: Set up Python
              uses: actions/setup-python@v4
              with:
                  python-version: '3.x'
            - name: Clean Android build
              run: |
                  cd android
                  ./gradlew clean
            - name: Find duplicate PackageList.java files
              env:
                ANDROID_DIR: ${{ github.workspace }}/android
              run: python scripts/find_duplicate_package_list_classes.py
            - name: Remove duplicate PackageList.java files
              if: ${{ failure() }}
              run: |
                duplicates=$(python scripts/find_duplicate_package_list_classes.py | grep -v "No duplicate")
                if [ ! -z "$duplicates" ]; then
                  echo "$duplicates" | while read -r file; do
                    rm "$file"
                    echo "Removed duplicate file: $file"
                  done
                fi
            - name: Regenerate autolinking files
              run: |
                cd android
                ./gradlew generateAutolinkingPackageList
            - name: Clear Metro cache
              run: rm -rf $TMPDIR/metro-*
            - name: Build Android APK
              run: |
                cd android
                ./gradlew assembleRelease
            - name: Upload Android APK
              uses: actions/upload-artifact@v4
              with:
                  name: android-apk
                  path: android/app/build/outputs/apk/release/app-release.apk
    build-image-ios:
        runs-on: macos-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v3
            - name: Set up Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: 20
            - name: Install dependencies
              run: npm ci
            - name: Install CocoaPods
              run: |
                  cd ios
                  pod install
            - name: Install the Apple certificate and provisioning profile
              env:
                IOS_P12_BASE64: ${{ secrets.IOS_P12_BASE64 }}
                IOS_P12_PASSWORD: ${{ secrets.IOS_P12_PASSWORD }}
                IOS_BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.IOS_BUILD_PROVISION_PROFILE_BASE64 }}
                IOS_KEYCHAIN_PASSWORD: ${{ secrets.IOS_KEYCHAIN_PASSWORD }}
              run: |
                # Create variables
                CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
                PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
                KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

                # Import certificate and provisioning profile from secrets
                echo -n "$IOS_P12_BASE64" | base64 --decode --output $CERTIFICATE_PATH
                echo -n "$IOS_BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH

                # Create temporary keychain
                security create-keychain -p "$IOS_KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
                security set-keychain-settings -lut 21600 "$KEYCHAIN_PATH"
                security unlock-keychain -p "$IOS_KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

                # Import certificate to keychain
                security import $CERTIFICATE_PATH -P "$IOS_P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
                security list-keychain -d user -s $KEYCHAIN_PATH

                # Apply provisioning profile
                mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
                cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

            # - name: Set up code signing
            #   uses: apple-actions/import-codesign-certs@v1
            #   with:
            #     p12-file-base64: ${{ secrets.IOS_P12_BASE64 }}
            #     p12-password: ${{ secrets.IOS_P12_PASSWORD }}
            - name: Build iOS IPA
              run: |
                cd ios
                xcodebuild -workspace GreetingHexJavascriptReact.xcworkspace -scheme GreetingHexJavascriptReact -configuration Release -archivePath GreetingHexJavascriptReact.xarchive archive -allowProvisioningUpdates
                xcodebuild -exportArchive -archivePath GreetingHexJavascriptReact.xarchive.xcarchive -exportOptionsPlist exportOptions.plist -exportPath . -allowProvisioningUpdates
            - name: Upload iOS IPA
              uses: actions/upload-artifact@v4
              with:
                name: GreetingHexJavascriptReact.ipa
                path: ios/GreetingHexJavascriptReact.ipa
    package-tests:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v3
            - name: Set up Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: 20
            - name: Install dependencies
              run: npm ci
            - name: Set up JDK 17
              uses: actions/setup-java@v3
              with:
                java-version: '17'
                distribution: 'temurin'
            - name: Package tests
              run: mvn clean package -DskipTests=true
            - name: Upload tests
              uses: actions/upload-artifact@v4
              with:
                  name: tests-with-dependencies
                  path: target/tests-with-dependencies.zip