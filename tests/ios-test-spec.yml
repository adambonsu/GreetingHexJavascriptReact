version: 0.1
# These default test spec file commands assume that the test package has been built in accordance
# with the instructions in AWS Device Farm's documentation for testing with Appium Java TestNG:
# https://docs.aws.amazon.com/devicefarm/latest/developerguide/test-types-appium.html

# Note that iOS 17 and above devices use a test host with an Apple silicon CPU, whereas
# iOS 16 and below devices use a test host with an Intel CPU.

# Phases represent collections of commands that are executed during your test run on the test host.
phases:

  # The install phase contains commands for installing dependencies to run your tests.
  # For your convenience, certain dependencies are preinstalled on the test host. 

  # Java is preinstalled and preconfigured on the test host. For iOS 17 and above devices, tests run
  # using Java version 11, whereas iOS 16 and below devices run tests using Java version 12.
  # Additionally, you can use the Node.JS tools nvm, npm, and avm to setup your Appium server.
  install:
    commands:
      # The Appium server is written using Node.js. In order to run your desired version of Appium,
      # you first need to set up a Node.js environment that is compatible with your version of Appium.
      # For iOS, use "nvm use" to switch between the two preinstalled NodeJS versions 14 and 16, and 
      # use "nvm install" to download a new version of your choice.
      - export NVM_DIR=$HOME/.nvm
      - . $NVM_DIR/nvm.sh
      - nvm install 18
      - nvm use 18
      - node --version

      # For iOS, Appium versions 1.22.2, 2.2.1, and 2.11.5 are preinstalled and selectable through avm.
      # For all other versions, please use npm to install them. For example:
      # - npm install -g appium@2.1.3;
      # Note that, for iOS devices, Appium 2 is only supported on iOS version 14.5 and above using
      # NodeJS version 16 and above.
      - avm 2.11.5
      - appium --version

      # For Appium version 2, for iOS tests, the XCUITest driver is preinstalled using driver version 5.7.0
      # for Appium 2.2.1 and driver version 7.27.0 for Appium 2.11.5. If you want to install a different
      # version of the driver, you can use the Appium extension CLI to uninstall the existing XCUITest driver
      # and install your desired version:
      # - |-
      #   if [ $DEVICEFARM_DEVICE_PLATFORM_NAME = "iOS" ];
      #   then
      #     appium driver uninstall xcuitest;
      #     appium driver install xcuitest@5.8.1;
      #   fi;

      - export DEVICE_NAME=$DEVICEFARM_DEVICE_NAME
      - export APPIUM_IP_ADDRESS="127.0.0.1"
      - export APPIUM_PORT="4723"
      # We recommend setting the Appium server's base path explicitly for accepting commands.
      - export APPIUM_BASE_PATH=/wd/hub
      - export APPIUM_SERVER_MANAGEMENT=false
      - export APP_PATH=$DEVICEFARM_APP_PATH
      - export PLATFORM_NAME=$DEVICEFARM_DEVICE_PLATFORM_NAME
      - export DEVICE_OS_VERSION=$DEVICEFARM_DEVICE_OS_VERSION
      - export DEVICE_UDID=$DEVICEFARM_DEVICE_UDID
      - export TEST_SCREENSHOT_PATH=$DEVICEFARM_SCREENSHOT_PATH
      - export TEST_LOG_DIR=$DEVICEFARM_LOG_DIR
      - export LOG_LEVEL=DEBUG

      # Verify the version of Java on the test host is compatible with your test package as follows.
      - java -version

  # The pre-test phase contains commands for setting up your test environment.
  pre_test:
    commands:
      # Setup the CLASSPATH so that Java knows where to find your test classes.
      - export CLASSPATH=$CLASSPATH:$DEVICEFARM_TEST_PACKAGE_PATH/*
      - export CLASSPATH=$CLASSPATH:$DEVICEFARM_TEST_PACKAGE_PATH/dependency-jars/*

      # Device Farm provides different pre-built versions of WebDriverAgent, an essential Appium
      # dependency for iOS devices, and each version is suggested for different versions of Appium:
      # DEVICEFARM_WDA_DERIVED_DATA_PATH_V9: this version is suggested for Appium 2 (with XCUITest driver version 7)
      # DEVICEFARM_WDA_DERIVED_DATA_PATH_V8: this version is suggested for Appium 2 (with XCUITest driver versions 5 and 6)
      # DEVICEFARM_WDA_DERIVED_DATA_PATH_V7: this version is suggested for Appium 1
      # Additionally, for iOS versions 16 and below, the device unique identifier (UDID) needs
      # to be slightly modified for Appium tests.
      - |-
        if [ $DEVICEFARM_DEVICE_PLATFORM_NAME = "iOS" ];
         then
           APPIUM_VERSION=$(appium --version);
           if [ $(echo $APPIUM_VERSION | cut -d "." -f1) -ge 2 ];
           then
             if [ $(echo $APPIUM_VERSION | cut -d "." -f2) -ge 11 ];
             then
               DEVICEFARM_WDA_DERIVED_DATA_PATH=$DEVICEFARM_WDA_DERIVED_DATA_PATH_V9;
             else
               DEVICEFARM_WDA_DERIVED_DATA_PATH=$DEVICEFARM_WDA_DERIVED_DATA_PATH_V8;
             fi;
           else
             DEVICEFARM_WDA_DERIVED_DATA_PATH=$DEVICEFARM_WDA_DERIVED_DATA_PATH_V7;
           fi;

          if [ $(echo $DEVICEFARM_DEVICE_OS_VERSION | cut -d "." -f 1) -le 16 ];
          then
            DEVICEFARM_DEVICE_UDID_FOR_APPIUM=$(echo $DEVICEFARM_DEVICE_UDID | tr -d "-");
          else
            DEVICEFARM_DEVICE_UDID_FOR_APPIUM=$DEVICEFARM_DEVICE_UDID;
          fi;
        fi;

      # We recommend starting the Appium server process in the background using the command below.
      # The Appium server log will be written to the $DEVICEFARM_LOG_DIR directory.
      # The environment variables passed as capabilities to the server will be automatically assigned
      # during your test run based on your test's specific device.
      # For more information about which environment variables are set and how they're set, please see
      # https://docs.aws.amazon.com/devicefarm/latest/developerguide/custom-test-environment-variables.html
      - |-
        appium --base-path=$APPIUM_BASE_PATH --log-timestamp \
          --log-no-colors --relaxed-security --default-capabilities \
          "{\"appium:deviceName\": \"$DEVICEFARM_DEVICE_NAME\", \
          \"platformName\": \"$DEVICEFARM_DEVICE_PLATFORM_NAME\", \
          \"appium:app\": \"$DEVICEFARM_APP_PATH\", \
          \"appium:udid\":\"$DEVICEFARM_DEVICE_UDID_FOR_APPIUM\", \
          \"appium:platformVersion\": \"$DEVICEFARM_DEVICE_OS_VERSION\", \
          \"appium:derivedDataPath\": \"$DEVICEFARM_WDA_DERIVED_DATA_PATH\", \
          \"appium:usePrebuiltWDA\": true, \
          \"appium:automationName\": \"XCUITest\"}" \
          >> $DEVICEFARM_LOG_DIR/appium.log 2>&1 &

      # This code will wait until the Appium server starts.
      - |-
        appium_initialization_time=0;
        until curl --silent --fail "http://0.0.0.0:4723${APPIUM_BASE_PATH}/status"; do
          if [[ $appium_initialization_time -gt 30 ]]; then
            echo "Appium did not start within 30 seconds. Exiting...";
            exit 1;
          fi;
          appium_initialization_time=$((appium_initialization_time + 1));
          echo "Waiting for Appium to start on port 4723...";
          sleep 1;
        done;

  test:
    commands:
      - echo "SHELL:" $SHELL
      - echo "APP_PATH:" $APP_PATH
      - echo "PLATFORM_NAME:" $PLATFORM_NAME
      - echo "DEVICE_OS_VERSION:" $DEVICE_OS_VERSION
      - echo "DEVICE_UDID:"  $DEVICE_UDID


      # Your test package is downloaded and unpackaged into the $DEVICEFARM_TEST_PACKAGE_PATH directory.
      # - echo "Navigate to test package directory:" $DEVICEFARM_TEST_PACKAGE_PATH
      - pwd
      - echo "Current directory contents:"
      - find .  -type f -exec ls -l {} \;
      - echo "Test package contents:"
      - find $DEVICEFARM_TEST_PACKAGE_PATH -type f -exec ls -l {} \;
      - env | sort

      # The following command runs your Appium Java TestNG test.
      # For more information, please see TestNG's documentation here:
      # http://testng.org/doc/documentation-main.html#running-testng
      - cd $DEVICEFARM_TEST_PACKAGE_PATH
      # - mkdir -p target/test-classes
      # - cp -pr com target/test-classes/
      # - cp -pr utils target/test-classes/
      - echo "Starting tests on device"
      - |-
        java -cp "$DEVICEFARM_TEST_PACKAGE_PATH/test-classes:$DEVICEFARM_TEST_PACKAGE_PATH/dependency-jars/*:$DEVICEFARM_TEST_PACKAGE_PATH/com/*:$DEVICEFARM_TEST_PACKAGE_PATH/tests-*.jar" \
          org.testng.TestNG \
          -testclass com.adambonsu.apps.greetinghexjavascriptreact.tests.IOSTest \
          -d $DEVICEFARM_LOG_DIR/test-output

      - mvn test -Dtest=AndroidTest -X >> $DEVICEFARM_LOG_DIR/mvn_test.log 2>&1

      # To run your tests with a testng.xml file, use the following commands instead:
      # - echo "Unzipping the tests JAR file"
      # - unzip *-tests.jar
      # - |-
      #   java -Dappium.screenshots.dir=$DEVICEFARM_SCREENSHOT_PATH org.testng.TestNG -testjar *-tests.jar \
      #     testng.xml -d $DEVICEFARM_LOG_DIR/test-output -verbose 10


  # The post-test phase contains commands that are run after your tests have completed.
  # If you need to run any commands to generating logs and reports on how your test performed,
  # we recommend adding them to this section.
  post_test:
    commands:
      - echo "Cleaning up after tests"
      # Add any cleanup commands

# Artifacts are a list of paths on the filesystem where you can store test output and reports.
# All files in these paths will be collected by Device Farm.
# These files will be available through the ListArtifacts API as your "Customer Artifacts".
artifacts:
  # By default, Device Farm will collect your artifacts from the $DEVICEFARM_LOG_DIR directory.
  - $DEVICEFARM_LOG_DIR
